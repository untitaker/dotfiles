#!/bin/bash
dzen2_globalparams="-e '' -h 16"
mail_main="$HOME/.mail/uberspace-markus"
mail_main_inbox="$mail_main/INBOX"

# Maybe one day i will learn how to actually use them
# Meanwhile, they're just documentation
title_color="#888"
separator_color="#333"
blue_color="#3465A4"

export STATUS_MAIL=""

# That one is needed because file gets already cleared when process doesn't have any data yet
dump() {
    # $1: text
    # $2: name
    # $3: priority
    echo -n "$1" >/tmp/statusbar_$2_$3
}

get() {
    # $1: name
    for f in /tmp/statusbar_$1_*; do
        cat $f
        echo
    done | tail -1  # this relies on cat printing the files in alphabetical order

}

remove() {
    # $1: name
    # $2: priority to remove. * for all
    rm /tmp/statusbar_$1_$2
}

### VOL
printVol() {
    state="$(amixer get Master | grep "Mono: Playback")"
    state=($state)
    vol=$(echo ${state[3]} | tr -d "[" | tr -d "]")
    mute=${state[5]}
    echo -n "^fg($title_color)VOL: "
    ([ "$mute" = "[off]" ] && echo -n "^fg(#ff0000)") || echo -n "^fg($blue_color)"
    echo -n "$vol^fg()"
}

### DATE
printDate() {
    echo -n "$(date '+%H^fg(#333):^fg()%M')"
    printSeparator
    echo -n "$(date '+%Y^fg(#333)/^fg()%m^fg(#333)/^fg()%d')"
}

### SEPARATOR
printSeparator() {
    echo -n "^fg($separator_color) | ^fg()"
}

### KEYCHAIN

printKeys() {
    GPG=$(ps -A | grep -c gpg-agent)
    SSH=$(ps -A | grep -c ssh-agent)
    [ "$GPG" != "0" ] && echo -n "^fg(#FF0000)"
    echo -n "GPG^fg(), "
    [ "$SSH" != "0" ] && echo -n "^fg(#FF0000)"
    echo -n "SSH^fg()"
}

### MPD
printMpdStatus() {
    MPD_RUNNING=$(ps -A | grep -c "ncmpcpp") # performance boost, don't connect to server when not active
    if [ "$MPD_RUNNING" != "0" ]; then
        echo -n "^fg($blue_color)$(ncmpcpp --now-playing | cut -c-50)"
    else
        exit 1
    fi
    echo -n "^fg()"
}

printMpd() {
    mpdstat="$(printMpdStatus)" && echo -n "MPD: $mpdstat"
}

### MAIL
getNewMailStatus() {
    ls $mail_main_inbox/new | wc -l
}

getReadMailStatus() {
    ls $mail_main_inbox/cur | wc -l
}

printMailStatus() {
    new_msgs=$(getNewMailStatus)
    read_msgs=$(getReadMailStatus)
    [ "$new_msgs" != "0" ] && echo -n "^fg(#FF0000)$new_msgs^fg()" || echo -n "$read_msgs"
}

spawnMail() {
    dump "$(printMailStatus)" mail 0
    while inotifywait -r "$mail_main" &> /dev/null; do
        if [ "$STATUS_MAIL" == "" ]; then
            dump "$(printMailStatus)" mail 0
        else
            dump "$STATUS_MAIL" mail 0
        fi
    done
}

updateMail() {
    old_status=$(getNewMailStatus)

    dump "OFFLINEIMAP RUNNING" mail 1
    offlineimap
    dump "W3WATCH RUNNING" mail 1
    w3watch_text="$(w3watch -c)"
    remove mail 1
    if [ "$w3watch_text" ]; then
        echo -e "Subject: w3watch updates \n\n $w3watch_text" > "$mail_main_inbox/new/w3watch_$(date +%s)"
    fi

    new_status=$(getNewMailStatus)
    [ $new_status -gt $old_status ] && notify-send "You have $new_status unread mails!"
}

printMail() {
    mail_open=$(ps -A | grep -c mutt)
    output=$(get mail)
    echo -n "^fg($title_color)MAIL: ^fg()"
    [ "$mail_open" != "0" ] && echo -n "[$output]" || echo -n "$output"
}

printRight() {
    spawnMail &
    while sleep .3; do
        #printKeys
        #printSeparator
        printMail
        printSeparator
        printMpd && printSeparator
        printVol
        printSeparator
        printDate
        echo
    done
}

printLeft() {
    while true; do
        read raw
        echo " $raw "
    done
}

right() {
    printRight | dzen2 -sa r -ta r $dzen2_globalparams
}

left() {
    printLeft | dzen2 -sa l -ta l -expand r $dzen2_globalparams
}


trap 'kill 0 || (echo "WARNING: Using killall"; killall status)' SIGINT SIGTERM EXIT # handle Ctrl + C and terminate all jobs
$@
wait
