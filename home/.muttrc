# vim: filetype=muttrc
set charset=UTF-8

set folder=~/.mail/
source ~/.mutt/mailboxes

set spoolfile=+markus/INBOX
set postponed=+markus/drafts
set record=+markus/sent
set header_cache = ~/.mutt/cache/headers
set message_cachedir = ~/.mutt/cache/bodies
alternates "^(markus-(.*)@unterwaditzer\.net|m.unterwaditzer@aon.at)$"

set sleep_time = 0  # don't wait between mailbox switch
set delete
set quit
unset help  # hardcore!
unset mark_old
unset wait_key

set folder_format="%2C %2N %2s %f"
set editor="vim -c 'set textwidth=79'"
set trash=+markus/trash  # confirmed for working 2012-08-31
set tilde


unset confirmappend
set reply_to
set include
set fast_reply
set quit

set forward_format="Fwd: %s"
set mime_forward=yes
set forward_decode=no

unset markers # don't add plus signs to wrapped urls (needed for url selection in urxvt)
unset mark_old
bind editor <Tab> complete-query
bind editor ^T complete
set query_command= "mates mutt-query '%s'"

macro index,pager A \
    "<pipe-message>mates add | xargs mates edit<enter>" \
    "add the sender address"

auto_view text/html
alternative_order text/plain text/html text/enriched

# sidebar
set sidebar_visible = yes
set sidebar_width = 25

# commented because the latest AUR packages removed the patch
set sidebar_shortpath = yes
set sidebar_format = "%B%> !%F *%N .%S"
macro index,pager y "<enter-command>toggle sidebar_visible<enter><refresh>"
color sidebar_new yellow default
bind index,pager <right> sidebar-open
bind index,pager <down> sidebar-next
bind index,pager <up> sidebar-prev
set sidebar_delim = ' '

# messages index
folder-hook . "exec collapse-all"
set sort=threads
bind index gg first-entry
bind index G last-entry
bind index,pager R reply
bind index,pager r group-reply
bind index <space> collapse-thread

macro index,pager C "<copy-message>?<toggle-mailboxes>" "copy a message to a mailbox"
macro index,pager M "<save-message>?<toggle-mailboxes>" "move a message to a mailbox"

macro index,pager s "<save-message>+markus/archive <enter>" "archive"
macro index,pager \CS "<tag-thread><tag-prefix>s" "archive thread"

set index_format="%4C %Z%?y?@& ? %{%b %d} %-15.15L <%?M?%03M&%4l?> %s"
unset collapse_unread

macro index,pager F \
    "<shell-escape>/usr/bin/notmuch-mutt --prompt search<enter><change-folder-readonly>~/.cache/notmuch/mutt/results<enter>" \
    "search mail, using notmuch"
macro index,pager \" \
    "<pipe-message>/usr/bin/notmuch-mutt thread<enter><change-folder-readonly>~/.cache/notmuch/mutt/results<enter>" \
    "search and reconstruct owning thread, using notmuch"


# messages
set pager_stop
set pager_index_lines = 12
bind pager gg top
bind pager G bottom
bind pager k previous-line
bind pager j next-line
bind pager K previous-undeleted
bind pager J next-undeleted


# server settings
set sendmail = "/usr/bin/msmtp"
set ssl_force_tls = yes

set from="markus@unterwaditzer.net"
set realname="Markus Unterwaditzer"

# GNUPG

set pgp_auto_decode=yes
set pgp_use_gpg_agent=yes
set pgp_sign_as=0xFAAC788C
set pgp_timeout=60

set crypt_replysign=yes
set crypt_replyencrypt=yes
set crypt_replysignencrypted=yes
set crypt_autoencrypt=no

set crypt_verify_sig=yes

# -*-muttrc-*-
#
# Command formats for gpg.
# 
# This version uses gpg-2comp from 
#   http://70t.de/download/gpg-2comp.tar.gz
#
# $Id$
#
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# Note that we explicitly set the comment armor header since GnuPG, when used
# in some localiaztion environments, generates 8bit data in that header, thereby
# breaking PGP/MIME.

# decode application/pgp
set pgp_decode_command="gpg --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"

# verify a pgp/mime signature
set pgp_verify_command="gpg --status-fd=2 --no-verbose --quiet --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="gpg --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"

# create a pgp/mime signed attachment
# set pgp_sign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_sign_command="gpg --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
# set pgp_clearsign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_clearsign_command="gpg --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
# set pgp_encrypt_only_command="pgpewrap gpg-2comp -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_only_command="pgpewrap gpg --batch --quiet --no-verbose --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
# set pgp_encrypt_sign_command="pgpewrap gpg-2comp %?p?--passphrase-fd 0? -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap gpg %?p?--passphrase-fd 0? --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="gpg --no-verbose --import %f"

# export a key from the public key ring
set pgp_export_command="gpg --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg --verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg --no-verbose --batch --quiet --with-colons --with-fingerprint --with-fingerprint --list-keys %r"

# read in the secret key ring
set pgp_list_secring_command="gpg --no-verbose --batch --quiet --with-colons --with-fingerprint --with-fingerprint --list-secret-keys %r"

# fetch keys
# set pgp_getkeys_command="pkspxycwrap %r"

# pattern for good signature - may need to be adapted to locale!

# set pgp_good_sign="^gpgv?: Good signature from "

# OK, here's a version which uses gnupg's message catalog:
# set pgp_good_sign="`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`"

# This version uses --status-fd messages
set pgp_good_sign="^\\[GNUPG:\\] GOODSIG"

# COLORS
source ~/.mutt/base16-mutt-256
